# -*- coding: utf8 -*-

#author = blus

BUFSIZE = ''

import os

import hashlib



def c0():

    skr = os.urandom(8)



    print('[+]proof: skr=os.urandom(8)')
    print '[+]hashlib.sha256(skr).hexdigest()='+str(hashlib.sha256(skr).hexdigest())
    print '[+]skr[0:5].encode(\'hex\')='+str(skr[0:5].encode('hex'))
    print('[-]skr.encode(\'hex\')=')

    buf = raw_input(BUFSIZE).replace('\n','')

    if buf == skr.encode('hex') :
        print('proof completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def c1():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 1\n')



    print('''

  [+]n=13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211 

\n[+]e=3

\n[+]m=random.getrandbits(512)

\n[+]c=pow(m,e,n)=15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517

\n[+]((m>>72)<<72)=2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736

\n[-]long_to_bytes(m).encode('hex')=

''')



    buf = raw_input(BUFSIZE).replace('\n','')

    



    if buf == 'FLAG{2^8rsa7589693fc689c77c5f5262d654272427}'.encode('hex'):

        print('challenge1 completed\n')

    else:

        print('bye~')

        return 0

    return 1



def c2():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 2\n')

    print('''

  [+]n=12784625729032789592766625203074018101354917751492952685083808825504221816847310910447532133616954262271205877651255598995305639194329607493047941212754523879402744065076183778452640602625242851184095546100200565113016690161053808950384458996881574266573992526357954507491397978278604102524731393059303476350167738237822647246425836482533150025923051544431330502522043833872580483142594571802189321599016725741260254170793393777293145010525686561904427613648184843619301241414264343057368192416551134404100386155751297424616254697041043851852081071306219462991969849123668248321130382231769250865190227630009181759219 

\n[+]e=65537

\n[+]m=random.getrandbits(512)

\n[+]c=pow(m,e,n)=627824086157119245056478875800598959553774250161670787506083253960788230737588761787385686125828765665617567887904228030839535317987589608761534500003128247164233774794784231518212804270056404565710426613938264302998015421153393879729263551292024543756422702956470022959537221269172084619081368498693930550456153543628170306324206266216348386707008661128717431426237486511309767286175518238620230507201952867261283880986868752676549613958785288914989429224582849218395471672295410036858881836363364885164276983237312235831591858044908369376855484127614933545955544787160352042318378588039587911741028067576722790778

\n[+]((p>>128)<<128)=97522826022187678545924975588711975512906538181361325096919121233043973599759518562689050415761485716705615149641768982838255403594331293651224395590747133152128042950062103156564440155088882592644046069208405360324372057140890317518802130081198060093576841538008960560391380395697098964411821716664506908672

\n[-]long_to_bytes(m).encode('hex')=

''')

    buf = raw_input(BUFSIZE).replace('\n','')

    

    if buf == 'FLAG{2^8rsa6e277f355dbe6da3edd6f356d2db6d6f}'.encode('hex'):
        print('challenge2 completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def c3():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 3\n')

    print('''

  [+]n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 

\n[+]e=3

\n[+]m=random.getrandbits(512)

\n[+]c=pow(m,e,n)=56164378185049402404287763972280630295410174183649054805947329504892979921131852321281317326306506444145699012788547718091371389698969718830761120076359634262880912417797038049510647237337251037070369278596191506725812511682495575589039521646062521091457438869068866365907962691742604895495670783101319608530

\n[+]d&((1<<512)-1)=787673996295376297668171075170955852109814939442242049800811601753001897317556022653997651874897208487913321031340711138331360350633965420642045383644955

\n[-]long_to_bytes(m).encode('hex')=

''')

    buf = raw_input(BUFSIZE).replace('\n','')

    

    if buf == 'FLAG{2^8rsa5ab086745f6ec745619a8b65fe4ec560}'.encode('hex'):

        print('challenge3 completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def c4():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 4\n')

    print('''

  [+]n=92896523979616431783569762645945918751162321185159790302085768095763248357146198882641160678623069857011832929179987623492267852304178894461486295864091871341339490870689110279720283415976342208476126414933914026436666789270209690168581379143120688241413470569887426810705898518783625903350928784794371176183 

\n[+]e=3

\n[+]m=random.getrandbits(512)

\n[+]n1=23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860

\n[+]c1=pow(m,e,n2)=2519188594271759205757864486234199030368509477419996746572813835802776507456368520243429255706508061522045



\n[+]n2==72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676

\n[+]c2=pow(m,e,n3)=78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989



\n[+]n3=91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311

\n[+]c3=pow(m,e,n3)=98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647

\n[-]long_to_bytes(m).encode('hex')=

''')

    buf = raw_input(BUFSIZE).replace('\n','')

    

    if buf == 'FLAG{2^8rsa5ab086745f6ec745619a8b65fe4ec560}'.encode('hex'):

        print('challenge4 completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def c5():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 5\n')

    print('''

  [+]n=95674518934047774725911472982175738826861807698520125214578384757192172382080105351542713995087445884294898291142155624121451343973492519311400590410897197089909958099071057183483599684664777420791963931882955034302058952519540618929383117664280697319310723262004094514783607953559661813781975635278419100031 

\n[+]e=7

\n[+]m=random.getrandbits(512)

\n[+]c=pow(m,e,n)=95345933247592750129234541691050564186129060761427899217859282056545077810198537956495899744824199121500953589289728553986290709101132142750500533199069792464539969770230699019031818304807642577213285223496033353541974175425442316219797192214898437473742228020666284712189926224354319160858648572933468763841

\n[+]x=pow(m+1,e,n)=95345933247592750129234541691050564186129060761427899217859282056545077810198537956495899744824294316168556223123013453122419796568553397561567499237794053656914991853484614188848857344753128758826619186495803912319483586090082964594142570068007908674279063231389267544163426557679508346431342911383725638756

\n[-]long_to_bytes(m).encode('hex')=

''')

    buf = raw_input(BUFSIZE).replace('\n','')

    

    if buf == 'FLAG{2^8rsa398cf8df7c26661bb7cb65b2b9fae25e}'.encode('hex'):

        print('challenge5 completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def c6():

    skr = os.urandom(8)

    #h = hashlib.sha256(skr).hexdigest()

    #s = skr[0:5].encode('hex')

    print('[+]Generating challenge 6\n')

    print('''

  [+]n=0xbadd260d14ea665b62e7d2e634f20a6382ac369cd44017305b69cf3a2694667ee651acded7085e0757d169b090f29f3f86fec255746674ffa8a6a3e1c9e1861003eb39f82cf74d84cc18e345f60865f998b33fc182a1a4ffa71f5ae48a1b5cb4c5f154b0997dc9b001e441815ce59c6c825f064fdca678858758dc2cebbc4d27L 

\n[+]d=random.getrandbits(1024*0.270)

\n[+]e=invmod(d,phin)

\n[+]hex(e)=0x11722b54dd6f3ad9ce81da6f6ecb0acaf2cbc3885841d08b32abc0672d1a7293f9856db8f9407dc05f6f373a2d9246752a7cc7b1b6923f1827adfaeefc811e6e5989cce9f00897cfc1fc57987cce4862b5343bc8e91ddf2bd9e23aea9316a69f28f407cfe324d546a7dde13eb0bd052f694aefe8ec0f5298800277dbab4a33bbL

\n[+]m=random.getrandbits(512)

\n[+]c=pow(m,e,n)=0xe3505f41ec936cf6bd8ae344bfec85746dc7d87a5943b3a7136482dd7b980f68f52c887585d1c7ca099310c4da2f70d4d5345d3641428797030177da6cc0d41e7b28d0abce694157c611697df8d0add3d900c00f778ac3428f341f47ecc4d868c6c5de0724b0c3403296d84f26736aa66f7905d498fa1862ca59e97f8f866cL

\n[-]long_to_bytes(m).encode('hex')=

''')

    buf = raw_input(BUFSIZE).replace('\n','')

    

    m6 = '6b3bb0cdc72a7f2ce89902e19db0fb2c0514c76874b2ca4113b86e6dc128d44cc859283db4ca8b0b5d9ee35032aec8cc8bb96e8c11547915fc9ef05aa2d72b28'

    if buf == m6:

        print('challenge6 completed\n')

    else:

        print('bye~')

        return 0

        

    return 1



def win():

    print('FLAG{9828f915d621b9a0a5666fc21e5ee84f}\n')



if __name__ == "__main__":



    try:

        c0=c0()

        if c0 ==0:

            exit()



        c1=c1()

        if c1 ==0:

            exit()



        c2=c2()

        if c2 ==0:

            exit()



        c3=c3()

        if c3 ==0:

            exit()



        c4=c4()

        if c4 ==0:

            exit()



        c5=c5()

        if c5 ==0:

            exit()



        c6=c6()

        if c6 ==0:

            exit()

        win()

    except:

        pass


